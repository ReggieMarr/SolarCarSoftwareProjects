/* 
 * File:   bms_proto2018.c
 * Author: Thomas
 *
 * Created on March 19, 2018, 10:50 PM
 */

#include "mcc_generated_files/mcc.h"
#include "bms_proto2018.h"
#include <stdio.h>
#include <stdlib.h>
#include <plib/usart.h>


#define _XTAL_FREQ 8000000
#define UART_FREQ 125000
#define CRC16 0x8005 //crc16 polynomial used for check bits

//BQ76PL455 FRAME INITIALIZATION BYTE FIELDS
#define BROADCMD_WRITE8    0xF1
#define BROADCMD_WRITE16   0xF2
#define BROADCMD_READ8     0XE1
#define BROADCMD_READ16    0xE2
#define GROUPCMD_WRITE8    0xA1
#define GROUPCMD_WRITE16   0xA2
#define GROUPCMD_READ8     0xB1
#define GROUPCMD_READ16    0xB2
#define SINGLECMD_WRITE8   0x11
#define SINGLECMD_WRITE16  0x12
#define SINGLECMD_READ8    0x01
#define SINGLECMD_READ16   0x02


void new_delaly_ms(unsigned int delay);
void PL455_SetAddress(char address);
uint16_t gen_crc16(const uint8_t *data, uint16_t size);
/*
 * 
 */
int main(int argc, char** argv){
    unsigned char config = 0, spbrg = 0, baudconfig = 0, i=0;
    unsigned char Txdata[] = "Hello_World";
    SYSTEM_Initialize();
    
    Close1USART();
    
    //USART config is 8 data bits, 8MHz, asynchronous communication, using high speed
    //constant reception, address detection off, 9600 baud rate
    //spbrg = Fosc/(16 * (baud + 1)) = 52
    config = USART_TX_INT_ON & USART_RX_INT_ON & USART_ASYNCH_MODE & USART_EIGHT_BIT &
            USART_BRGH_HIGH & USART_CONT_RX & USART_ADDEN_OFF;
    spbrg = 52;
    Open_1USART(config,spbrg);
    
    baudconfig = BAUD_8_BIT_RATE & BAUD_AUTO_OFF;
    baud1USART(baudconfig);
    
    
    //INTERRUPT_GlobalInterruptEnable();
    //INTERRUPT_PeripheralInterruptEnable();
    
    TRISA = 0x00;
    
    
    //TMR0_StartTimer();
    while(1){
        LATA = 0x01;
        __delay_ms(500);
        LATA = 0x00;
        __delay_ms(500);
        
        while(Busy1USART());
        putsUSART((char *)Txdata);
    }

    
    return (EXIT_SUCCESS);
}

void new_delay_ms(unsigned int delay){
    unsigned int i = 0;
    for(i = 0;i++; i < delay){
        __delay_ms(1);
    }
    
}

void PL455_SetAddress(uint8_t address){
    
    while(EUSART1_is_tx_ready == 0){}
    
    //EUSART1_Write(uint8_t address);
        
}

uint16_t gen_crc16(const uint8_t *data, uint16_t size)
{
    uint16_t out = 0;
    int bits_read = 0, bit_flag;

    /* Sanity check: */
    if(data == NULL)
        return 0;

    while(size > 0)
    {
        bit_flag = out >> 15;

        /* Get next bit: */
        out <<= 1;
        out |= (*data >> bits_read) & 1; // item a) work from the least significant bits

        /* Increment bit counter: */
        bits_read++;
        if(bits_read > 7)
        {
            bits_read = 0;
            data++;
            size--;
        }

        /* Cycle check: */
        if(bit_flag)
            out ^= CRC16;

    }

    // item b) "push out" the last 16 bits
    int i;
    for (i = 0; i < 16; ++i) {
        bit_flag = out >> 15;
        out <<= 1;
        if(bit_flag)
            out ^= CRC16;
    }

    // item c) reverse the bits
    uint16_t crc = 0;
    i = 0x8000;
    int j = 0x0001;
    for (; i != 0; i >>=1, j <<= 1) {
        if (i & out) crc |= j;
    }

    return crc;
}