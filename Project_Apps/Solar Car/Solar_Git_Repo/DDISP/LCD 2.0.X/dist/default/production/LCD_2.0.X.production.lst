

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 26 17:15:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.45
    19                           ; Generated 16/11/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F2620 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     _LATC	set	3979
    53  0000                     _LATCbits	set	3979
    54  0000                     _TRISC	set	3988
    55                           
    56                           	psect	smallconst
    57  001000                     __psmallconst:
    58                           	opt stack 0
    59  001000  00                 	db	0
    60  001001                     STR_1:
    61  001001  20                 	db	32
    62  001002  77                 	db	119	;'w'
    63  001003  6F                 	db	111	;'o'
    64  001004  77                 	db	119	;'w'
    65  001005  20                 	db	32
    66  001006  6C                 	db	108	;'l'
    67  001007  63                 	db	99	;'c'
    68  001008  64                 	db	100	;'d'
    69  001009  20                 	db	32
    70  00100A  77                 	db	119	;'w'
    71  00100B  6F                 	db	111	;'o'
    72  00100C  72                 	db	114	;'r'
    73  00100D  6B                 	db	107	;'k'
    74  00100E  73                 	db	115	;'s'
    75  00100F  20                 	db	32
    76  001010  20                 	db	32
    77  001011  6E                 	db	110	;'n'
    78  001012  69                 	db	105	;'i'
    79  001013  63                 	db	99	;'c'
    80  001014  65                 	db	101	;'e'
    81  001015  20                 	db	32
    82  001016  6F                 	db	111	;'o'
    83  001017  6E                 	db	110	;'n'
    84  001018  65                 	db	101	;'e'
    85  001019  21                 	db	33
    86  00101A  21                 	db	33
    87  00101B  20                 	db	32
    88  00101C  20                 	db	32
    89  00101D  20                 	db	32
    90  00101E  20                 	db	32
    91  00101F  20                 	db	32
    92  001020  20                 	db	32
    93  001021  00                 	db	0
    94                           
    95                           ; #config settings
    96  001022  00                 	db	0	; dummy byte at the end
    97  0000                     
    98                           	psect	cinit
    99  0011BA                     __pcinit:
   100                           	opt stack 0
   101  0011BA                     start_initialization:
   102                           	opt stack 0
   103  0011BA                     __initialization:
   104                           	opt stack 0
   105  0011BA                     end_of_initialization:
   106                           	opt stack 0
   107  0011BA                     __end_of__initialization:
   108                           	opt stack 0
   109  0011BA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   110  0011BC  6EF8               	movwf	tblptru,c
   111  0011BE  0E10               	movlw	high __Lsmallconst
   112  0011C0  6EF7               	movwf	tblptrh,c
   113  0011C2  0100               	movlb	0
   114  0011C4  EFB9  F008         	goto	_main	;jump to C main() function
   115                           tblptru	equ	0xFF8
   116                           tblptrh	equ	0xFF7
   117                           
   118                           	psect	cstackCOMRAM
   119  000001                     __pcstackCOMRAM:
   120                           	opt stack 0
   121  000001                     delay_ms@n:
   122                           	opt stack 0
   123                           
   124                           ; 2 bytes @ 0x0
   125  000001                     	ds	2
   126  000003                     ??_delay_ms:
   127                           
   128                           ; 1 bytes @ 0x2
   129  000003                     	ds	1
   130  000004                     send_nibble@nibble:
   131                           	opt stack 0
   132                           
   133                           ; 1 bytes @ 0x3
   134  000004                     	ds	1
   135  000005                     send_command_byte@byte:
   136                           	opt stack 0
   137  000005                     send_data_byte@byte:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0x4
   141  000005                     	ds	1
   142  000006                     write_to_lcd@data:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x5
   146  000006                     	ds	2
   147  000008                     ??_write_to_lcd:
   148                           
   149                           ; 1 bytes @ 0x7
   150  000008                     	ds	2
   151  00000A                     write_to_lcd@n:
   152                           	opt stack 0
   153                           
   154                           ; 2 bytes @ 0x9
   155  00000A                     	ds	2
   156  00000C                     write_to_lcd@n_130:
   157                           	opt stack 0
   158                           
   159                           ; 2 bytes @ 0xB
   160  00000C                     	ds	2
   161  00000E                     tblptru	equ	0xFF8
   162                           tblptrh	equ	0xFF7
   163                           
   164                           ; 1 bytes @ 0xD
   165 ;;
   166 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   167 ;;
   168 ;; *************** function _main *****************
   169 ;; Defined at:
   170 ;;		line 12 in file "main.c"
   171 ;; Parameters:    Size  Location     Type
   172 ;;		None
   173 ;; Auto vars:     Size  Location     Type
   174 ;;		None
   175 ;; Return value:  Size  Location     Type
   176 ;;                  1    wreg      void 
   177 ;; Registers used:
   178 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   179 ;; Tracked objects:
   180 ;;		On entry : 0/0
   181 ;;		On exit  : 0/0
   182 ;;		Unchanged: 0/0
   183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   188 ;;Total ram usage:        0 bytes
   189 ;; Hardware stack levels required when called:    4
   190 ;; This function calls:
   191 ;;		_config_lcd
   192 ;;		_write_to_lcd
   193 ;; This function is called by:
   194 ;;		Startup code after reset
   195 ;; This function uses a non-reentrant model
   196 ;;
   197                           
   198                           	psect	text0
   199  001172                     __ptext0:
   200                           	opt stack 0
   201  001172                     _main:
   202                           	opt stack 27
   203                           
   204                           ;main.c: 13: TRISC = 0b00000000;
   205                           
   206                           ;incstack = 0
   207  001172  0E00               	movlw	0
   208  001174  6E94               	movwf	3988,c	;volatile
   209                           
   210                           ;main.c: 18: LATCbits.LATC6 = 0;
   211  001176  9C8B               	bcf	3979,6,c	;volatile
   212                           
   213                           ;main.c: 19: LATCbits.LATC7 = 0;
   214  001178  9E8B               	bcf	3979,7,c	;volatile
   215                           
   216                           ;main.c: 20: LATCbits.LATC5 = 1;
   217  00117A  8A8B               	bsf	3979,5,c	;volatile
   218                           
   219                           ;main.c: 22: config_lcd();
   220  00117C  EC53  F008         	call	_config_lcd	;wreg free
   221                           
   222                           ;main.c: 25: write_to_lcd(" wow lcd works  nice one!!      ");
   223  001180  0E01               	movlw	low STR_1
   224  001182  6E06               	movwf	write_to_lcd@data,c
   225  001184  0E10               	movlw	high STR_1
   226  001186  6E07               	movwf	write_to_lcd@data+1,c
   227  001188  EC12  F008         	call	_write_to_lcd	;wreg free
   228  00118C                     l13:
   229  00118C  D7FF               	goto	l13
   230  00118E                     __end_of_main:
   231                           	opt stack 0
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           
   235 ;; *************** function _write_to_lcd *****************
   236 ;; Defined at:
   237 ;;		line 73 in file "lcd.c"
   238 ;; Parameters:    Size  Location     Type
   239 ;;  data            2    5[COMRAM] PTR const unsigned char 
   240 ;;		 -> STR_1(33), 
   241 ;; Auto vars:     Size  Location     Type
   242 ;;  n               2   11[COMRAM] int 
   243 ;;  n               2    9[COMRAM] int 
   244 ;; Return value:  Size  Location     Type
   245 ;;                  1    wreg      void 
   246 ;; Registers used:
   247 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   248 ;; Tracked objects:
   249 ;;		On entry : 0/0
   250 ;;		On exit  : 0/0
   251 ;;		Unchanged: 0/0
   252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   253 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   254 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   255 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   256 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   257 ;;Total ram usage:        8 bytes
   258 ;; Hardware stack levels used:    1
   259 ;; Hardware stack levels required when called:    3
   260 ;; This function calls:
   261 ;;		_send_command_byte
   262 ;;		_send_data_byte
   263 ;; This function is called by:
   264 ;;		_main
   265 ;; This function uses a non-reentrant model
   266 ;;
   267                           
   268                           	psect	text1
   269  001024                     __ptext1:
   270                           	opt stack 0
   271  001024                     _write_to_lcd:
   272                           	opt stack 27
   273                           
   274                           ;lcd.c: 74: send_command_byte(0x02);
   275                           
   276                           ;incstack = 0
   277  001024  0E02               	movlw	2
   278  001026  ECD2  F008         	call	_send_command_byte
   279                           
   280                           ;lcd.c: 75: for (int n=0 ; n<16 ; ++n) {
   281  00102A  0E00               	movlw	0
   282  00102C  6E0B               	movwf	write_to_lcd@n+1,c
   283  00102E  0E00               	movlw	0
   284  001030  6E0A               	movwf	write_to_lcd@n,c
   285  001032                     l774:
   286  001032  BE0B               	btfsc	write_to_lcd@n+1,7,c
   287  001034  D006               	goto	l43
   288  001036  500B               	movf	write_to_lcd@n+1,w,c
   289  001038  E115               	bnz	l784
   290  00103A  0E10               	movlw	16
   291  00103C  5C0A               	subwf	write_to_lcd@n,w,c
   292  00103E  B0D8               	btfsc	status,0,c
   293  001040  D011               	goto	u80
   294  001042                     l43:
   295                           
   296                           ;lcd.c: 76: send_data_byte(data[n]);
   297  001042  500A               	movf	write_to_lcd@n,w,c
   298  001044  2406               	addwf	write_to_lcd@data,w,c
   299  001046  6E08               	movwf	??_write_to_lcd& (0+255),c
   300  001048  500B               	movf	write_to_lcd@n+1,w,c
   301  00104A  2007               	addwfc	write_to_lcd@data+1,w,c
   302  00104C  6E09               	movwf	(??_write_to_lcd+1)& (0+255),c
   303  00104E  C008  FFF6         	movff	??_write_to_lcd,tblptrl
   304  001052  C009  FFF7         	movff	??_write_to_lcd+1,tblptrh
   305  001056                     	if	0	;tblptru may be non-zero
   306  001056                     	endif
   307  001056                     	if	0	;tblptru may be non-zero
   308  001056                     	endif
   309  001056  0008               	tblrd		*
   310  001058  50F5               	movf	tablat,w,c
   311  00105A  ECC7  F008         	call	_send_data_byte
   312  00105E  4A0A               	infsnz	write_to_lcd@n,f,c
   313  001060  2A0B               	incf	write_to_lcd@n+1,f,c
   314  001062  D7E7               	goto	l774
   315  001064                     u80:
   316  001064                     l784:
   317                           
   318                           ;lcd.c: 77: }
   319                           ;lcd.c: 78: send_command_byte(0xC0);
   320  001064  0EC0               	movlw	192
   321  001066  ECD2  F008         	call	_send_command_byte
   322                           
   323                           ;lcd.c: 79: for (int n=16 ; n<32 ; ++n) {
   324  00106A  0E00               	movlw	0
   325  00106C  6E0D               	movwf	write_to_lcd@n_130+1,c
   326  00106E  0E10               	movlw	16
   327  001070  6E0C               	movwf	write_to_lcd@n_130,c
   328  001072                     l788:
   329  001072  BE0D               	btfsc	write_to_lcd@n_130+1,7,c
   330  001074  D006               	goto	l45
   331  001076  500D               	movf	write_to_lcd@n_130+1,w,c
   332  001078  E115               	bnz	l47
   333  00107A  0E20               	movlw	32
   334  00107C  5C0C               	subwf	write_to_lcd@n_130,w,c
   335  00107E  B0D8               	btfsc	status,0,c
   336  001080  0012               	return	
   337  001082                     l45:
   338                           
   339                           ;lcd.c: 80: send_data_byte(data[n]);
   340  001082  500C               	movf	write_to_lcd@n_130,w,c
   341  001084  2406               	addwf	write_to_lcd@data,w,c
   342  001086  6E08               	movwf	??_write_to_lcd& (0+255),c
   343  001088  500D               	movf	write_to_lcd@n_130+1,w,c
   344  00108A  2007               	addwfc	write_to_lcd@data+1,w,c
   345  00108C  6E09               	movwf	(??_write_to_lcd+1)& (0+255),c
   346  00108E  C008  FFF6         	movff	??_write_to_lcd,tblptrl
   347  001092  C009  FFF7         	movff	??_write_to_lcd+1,tblptrh
   348  001096                     	if	0	;tblptru may be non-zero
   349  001096                     	endif
   350  001096                     	if	0	;tblptru may be non-zero
   351  001096                     	endif
   352  001096  0008               	tblrd		*
   353  001098  50F5               	movf	tablat,w,c
   354  00109A  ECC7  F008         	call	_send_data_byte
   355  00109E  4A0C               	infsnz	write_to_lcd@n_130,f,c
   356  0010A0  2A0D               	incf	write_to_lcd@n_130+1,f,c
   357  0010A2  D7E7               	goto	l788
   358  0010A4                     l47:
   359  0010A4  0012               	return		;funcret
   360  0010A6                     __end_of_write_to_lcd:
   361                           	opt stack 0
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           status	equ	0xFD8
   367                           
   368 ;; *************** function _send_data_byte *****************
   369 ;; Defined at:
   370 ;;		line 40 in file "lcd.c"
   371 ;; Parameters:    Size  Location     Type
   372 ;;  byte            1    wreg     unsigned char 
   373 ;; Auto vars:     Size  Location     Type
   374 ;;  byte            1    4[COMRAM] unsigned char 
   375 ;; Return value:  Size  Location     Type
   376 ;;                  1    wreg      void 
   377 ;; Registers used:
   378 ;;		wreg, status,2, status,0, cstack
   379 ;; Tracked objects:
   380 ;;		On entry : 0/0
   381 ;;		On exit  : 0/0
   382 ;;		Unchanged: 0/0
   383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   387 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   388 ;;Total ram usage:        1 bytes
   389 ;; Hardware stack levels used:    1
   390 ;; Hardware stack levels required when called:    2
   391 ;; This function calls:
   392 ;;		_send_nibble
   393 ;; This function is called by:
   394 ;;		_write_to_lcd
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           	psect	text2
   399  00118E                     __ptext2:
   400                           	opt stack 0
   401  00118E                     _send_data_byte:
   402                           	opt stack 27
   403                           
   404                           ;incstack = 0
   405                           ;send_data_byte@byte stored from wreg
   406  00118E  6E05               	movwf	send_data_byte@byte,c
   407                           
   408                           ;lcd.c: 42: LATCbits.LATC7 = 1;
   409  001190  8E8B               	bsf	3979,7,c	;volatile
   410                           
   411                           ;lcd.c: 43: send_nibble(byte >> 4);
   412  001192  3805               	swapf	send_data_byte@byte,w,c
   413  001194  0B0F               	andlw	15
   414  001196  EC8D  F008         	call	_send_nibble
   415                           
   416                           ;lcd.c: 44: send_nibble(byte & 0xF);
   417  00119A  5005               	movf	send_data_byte@byte,w,c
   418  00119C  0B0F               	andlw	15
   419  00119E  EC8D  F008         	call	_send_nibble
   420  0011A2  0012               	return		;funcret
   421  0011A4                     __end_of_send_data_byte:
   422                           	opt stack 0
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           status	equ	0xFD8
   428                           
   429 ;; *************** function _config_lcd *****************
   430 ;; Defined at:
   431 ;;		line 47 in file "lcd.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;		None
   436 ;; Return value:  Size  Location     Type
   437 ;;                  1    wreg      void 
   438 ;; Registers used:
   439 ;;		wreg, status,2, status,0, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;Total ram usage:        0 bytes
   450 ;; Hardware stack levels used:    1
   451 ;; Hardware stack levels required when called:    3
   452 ;; This function calls:
   453 ;;		_delay_ms
   454 ;;		_send_command_byte
   455 ;;		_send_nibble
   456 ;; This function is called by:
   457 ;;		_main
   458 ;; This function uses a non-reentrant model
   459 ;;
   460                           
   461                           	psect	text3
   462  0010A6                     __ptext3:
   463                           	opt stack 0
   464  0010A6                     _config_lcd:
   465                           	opt stack 27
   466                           
   467                           ;lcd.c: 54: delay_ms(1000);
   468                           
   469                           ;incstack = 0
   470  0010A6  0E03               	movlw	3
   471  0010A8  6E02               	movwf	delay_ms@n+1,c
   472  0010AA  0EE8               	movlw	232
   473  0010AC  6E01               	movwf	delay_ms@n,c
   474  0010AE  ECA7  F008         	call	_delay_ms	;wreg free
   475                           
   476                           ;lcd.c: 56: delay_ms(16);
   477  0010B2  0E00               	movlw	0
   478  0010B4  6E02               	movwf	delay_ms@n+1,c
   479  0010B6  0E10               	movlw	16
   480  0010B8  6E01               	movwf	delay_ms@n,c
   481  0010BA  ECA7  F008         	call	_delay_ms	;wreg free
   482                           
   483                           ;lcd.c: 57: send_nibble(0b0011);
   484  0010BE  0E03               	movlw	3
   485  0010C0  EC8D  F008         	call	_send_nibble
   486                           
   487                           ;lcd.c: 58: delay_ms(5);
   488  0010C4  0E00               	movlw	0
   489  0010C6  6E02               	movwf	delay_ms@n+1,c
   490  0010C8  0E05               	movlw	5
   491  0010CA  6E01               	movwf	delay_ms@n,c
   492  0010CC  ECA7  F008         	call	_delay_ms	;wreg free
   493                           
   494                           ;lcd.c: 59: send_nibble(0b0011);
   495  0010D0  0E03               	movlw	3
   496  0010D2  EC8D  F008         	call	_send_nibble
   497                           
   498                           ;lcd.c: 60: delay_ms(1);
   499  0010D6  0E00               	movlw	0
   500  0010D8  6E02               	movwf	delay_ms@n+1,c
   501  0010DA  0E01               	movlw	1
   502  0010DC  6E01               	movwf	delay_ms@n,c
   503  0010DE  ECA7  F008         	call	_delay_ms	;wreg free
   504                           
   505                           ;lcd.c: 61: send_nibble(0b0011);
   506  0010E2  0E03               	movlw	3
   507  0010E4  EC8D  F008         	call	_send_nibble
   508                           
   509                           ;lcd.c: 62: delay_ms(5);
   510  0010E8  0E00               	movlw	0
   511  0010EA  6E02               	movwf	delay_ms@n+1,c
   512  0010EC  0E05               	movlw	5
   513  0010EE  6E01               	movwf	delay_ms@n,c
   514  0010F0  ECA7  F008         	call	_delay_ms	;wreg free
   515                           
   516                           ;lcd.c: 63: send_nibble(0b0010);
   517  0010F4  0E02               	movlw	2
   518  0010F6  EC8D  F008         	call	_send_nibble
   519                           
   520                           ;lcd.c: 66: send_command_byte(0b00101000);
   521  0010FA  0E28               	movlw	40
   522  0010FC  ECD2  F008         	call	_send_command_byte
   523                           
   524                           ;lcd.c: 67: send_command_byte(0b00001000);
   525  001100  0E08               	movlw	8
   526  001102  ECD2  F008         	call	_send_command_byte
   527                           
   528                           ;lcd.c: 68: send_command_byte(0b00000001);
   529  001106  0E01               	movlw	1
   530  001108  ECD2  F008         	call	_send_command_byte
   531                           
   532                           ;lcd.c: 69: send_command_byte(0b00000110);
   533  00110C  0E06               	movlw	6
   534  00110E  ECD2  F008         	call	_send_command_byte
   535                           
   536                           ;lcd.c: 70: send_command_byte(0b00001101);
   537  001112  0E0D               	movlw	13
   538  001114  ECD2  F008         	call	_send_command_byte
   539  001118  0012               	return		;funcret
   540  00111A                     __end_of_config_lcd:
   541                           	opt stack 0
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           status	equ	0xFD8
   547                           
   548 ;; *************** function _send_command_byte *****************
   549 ;; Defined at:
   550 ;;		line 32 in file "lcd.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;  byte            1    wreg     unsigned char 
   553 ;; Auto vars:     Size  Location     Type
   554 ;;  byte            1    4[COMRAM] unsigned char 
   555 ;; Return value:  Size  Location     Type
   556 ;;                  1    wreg      void 
   557 ;; Registers used:
   558 ;;		wreg, status,2, status,0, cstack
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   567 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   568 ;;Total ram usage:        1 bytes
   569 ;; Hardware stack levels used:    1
   570 ;; Hardware stack levels required when called:    2
   571 ;; This function calls:
   572 ;;		_send_nibble
   573 ;; This function is called by:
   574 ;;		_config_lcd
   575 ;;		_write_to_lcd
   576 ;;		_clear_lcd
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text4
   581  0011A4                     __ptext4:
   582                           	opt stack 0
   583  0011A4                     _send_command_byte:
   584                           	opt stack 27
   585                           
   586                           ;incstack = 0
   587                           ;send_command_byte@byte stored from wreg
   588  0011A4  6E05               	movwf	send_command_byte@byte,c
   589                           
   590                           ;lcd.c: 34: LATCbits.LATC7 = 0;
   591  0011A6  9E8B               	bcf	3979,7,c	;volatile
   592                           
   593                           ;lcd.c: 35: send_nibble(byte >> 4);
   594  0011A8  3805               	swapf	send_command_byte@byte,w,c
   595  0011AA  0B0F               	andlw	15
   596  0011AC  EC8D  F008         	call	_send_nibble
   597                           
   598                           ;lcd.c: 36: send_nibble(byte & 0xF);
   599  0011B0  5005               	movf	send_command_byte@byte,w,c
   600  0011B2  0B0F               	andlw	15
   601  0011B4  EC8D  F008         	call	_send_nibble
   602  0011B8  0012               	return		;funcret
   603  0011BA                     __end_of_send_command_byte:
   604                           	opt stack 0
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           status	equ	0xFD8
   610                           
   611 ;; *************** function _send_nibble *****************
   612 ;; Defined at:
   613 ;;		line 19 in file "lcd.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;  nibble          1    wreg     unsigned char 
   616 ;; Auto vars:     Size  Location     Type
   617 ;;  nibble          1    3[COMRAM] unsigned char 
   618 ;; Return value:  Size  Location     Type
   619 ;;                  1    wreg      void 
   620 ;; Registers used:
   621 ;;		wreg, status,2, status,0, cstack
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   630 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   631 ;;Total ram usage:        1 bytes
   632 ;; Hardware stack levels used:    1
   633 ;; Hardware stack levels required when called:    1
   634 ;; This function calls:
   635 ;;		_delay_ms
   636 ;; This function is called by:
   637 ;;		_send_command_byte
   638 ;;		_send_data_byte
   639 ;;		_config_lcd
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text5
   644  00111A                     __ptext5:
   645                           	opt stack 0
   646  00111A                     _send_nibble:
   647                           	opt stack 27
   648                           
   649                           ;incstack = 0
   650                           ;send_nibble@nibble stored from wreg
   651  00111A  6E04               	movwf	send_nibble@nibble,c
   652                           
   653                           ;lcd.c: 22: LATC = (LATC & 0xF0) + nibble;
   654  00111C  508B               	movf	3979,w,c	;volatile
   655  00111E  0BF0               	andlw	240
   656  001120  2404               	addwf	send_nibble@nibble,w,c
   657  001122  6E8B               	movwf	3979,c	;volatile
   658                           
   659                           ;lcd.c: 23: delay_ms(1);
   660  001124  0E00               	movlw	0
   661  001126  6E02               	movwf	delay_ms@n+1,c
   662  001128  0E01               	movlw	1
   663  00112A  6E01               	movwf	delay_ms@n,c
   664  00112C  ECA7  F008         	call	_delay_ms	;wreg free
   665                           
   666                           ;lcd.c: 25: LATCbits.LATC5 = 0;
   667  001130  9A8B               	bcf	3979,5,c	;volatile
   668                           
   669                           ;lcd.c: 26: delay_ms(1);
   670  001132  0E00               	movlw	0
   671  001134  6E02               	movwf	delay_ms@n+1,c
   672  001136  0E01               	movlw	1
   673  001138  6E01               	movwf	delay_ms@n,c
   674  00113A  ECA7  F008         	call	_delay_ms	;wreg free
   675                           
   676                           ;lcd.c: 27: LATCbits.LATC5 = 1;
   677  00113E  8A8B               	bsf	3979,5,c	;volatile
   678                           
   679                           ;lcd.c: 28: delay_ms(2);
   680  001140  0E00               	movlw	0
   681  001142  6E02               	movwf	delay_ms@n+1,c
   682  001144  0E02               	movlw	2
   683  001146  6E01               	movwf	delay_ms@n,c
   684  001148  ECA7  F008         	call	_delay_ms	;wreg free
   685  00114C  0012               	return		;funcret
   686  00114E                     __end_of_send_nibble:
   687                           	opt stack 0
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           status	equ	0xFD8
   693                           
   694 ;; *************** function _delay_ms *****************
   695 ;; Defined at:
   696 ;;		line 12 in file "lcd.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  n               2    0[COMRAM] unsigned int 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;		None
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      void 
   703 ;; Registers used:
   704 ;;		wreg, status,2, status,0
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   713 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   714 ;;Total ram usage:        3 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_send_nibble
   720 ;;		_config_lcd
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text6
   725  00114E                     __ptext6:
   726                           	opt stack 0
   727  00114E                     _delay_ms:
   728                           	opt stack 27
   729                           
   730                           ;lcd.c: 14: while(n--) {
   731                           
   732                           ;incstack = 0
   733  00114E  D008               	goto	l25
   734  001150                     l744:
   735                           
   736                           ;lcd.c: 15: _delay(4000);
   737  001150  0E06               	movlw	6
   738  001152  6E03               	movwf	??_delay_ms& (0+255),c
   739  001154  0E30               	movlw	48
   740  001156                     u117:
   741  001156  2EE8               	decfsz	wreg,f,c
   742  001158  D7FE               	bra	u117
   743  00115A  2E03               	decfsz	??_delay_ms& (0+255),f,c
   744  00115C  D7FC               	bra	u117
   745  00115E  D000               	nop2	
   746  001160                     l25:
   747  001160  0601               	decf	delay_ms@n,f,c
   748  001162  A0D8               	btfss	status,0,c
   749  001164  0602               	decf	delay_ms@n+1,f,c
   750  001166  2801               	incf	delay_ms@n,w,c
   751  001168  E1F3               	bnz	l744
   752  00116A  2802               	incf	delay_ms@n+1,w,c
   753  00116C  B4D8               	btfsc	status,2,c
   754  00116E  0012               	return	
   755  001170  D7EF               	goto	l26
   756  001172                     __end_of_delay_ms:
   757                           	opt stack 0
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           wreg	equ	0xFE8
   763                           status	equ	0xFD8
   764                           tblptru	equ	0xFF8
   765                           tblptrh	equ	0xFF7
   766                           tblptrl	equ	0xFF6
   767                           tablat	equ	0xFF5
   768                           wreg	equ	0xFE8
   769                           status	equ	0xFD8
   770                           
   771                           	psect	rparam
   772  0000                     tblptru	equ	0xFF8
   773                           tblptrh	equ	0xFF7
   774                           tblptrl	equ	0xFF6
   775                           tablat	equ	0xFF5
   776                           wreg	equ	0xFE8
   777                           status	equ	0xFD8


Data Sizes:
    Strings     33
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     13      13
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    write_to_lcd@data	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _main->_write_to_lcd
    _write_to_lcd->_send_command_byte
    _write_to_lcd->_send_data_byte
    _send_data_byte->_send_nibble
    _config_lcd->_send_command_byte
    _send_command_byte->_send_nibble
    _send_nibble->_delay_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3626
                         _config_lcd
                       _write_to_lcd
 ---------------------------------------------------------------------------------
 (1) _write_to_lcd                                         8     6      2    1648
                                              5 COMRAM     8     6      2
                  _send_command_byte
                     _send_data_byte
 ---------------------------------------------------------------------------------
 (2) _send_data_byte                                       1     1      0     696
                                              4 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _config_lcd                                           0     0      0    1978
                           _delay_ms
                  _send_command_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_command_byte                                    1     1      0     696
                                              4 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (3) _send_nibble                                          1     1      0     652
                                              3 COMRAM     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             3     1      2     630
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_lcd
     _delay_ms
     _send_command_byte
       _send_nibble
         _delay_ms
     _send_nibble
       _delay_ms
   _write_to_lcd
     _send_command_byte
       _send_nibble
         _delay_ms
     _send_data_byte
       _send_nibble
         _delay_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      D       D       1       10.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 26 17:15:18 2018

 __end_of_send_command_byte 11BA                          l13 118C                          l25 1160  
                        l26 1150                          l43 1042                          l45 1082  
                        l47 10A4                          u80 1064                 __CFG_BORV$3 000000  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000                 __CFG_LVP$ON 000000  
   __size_of_send_data_byte 0016                         l744 1150                         l774 1032  
                       l784 1064                         l788 1072                __CFG_CPB$OFF 000000  
                       u117 1156                __CFG_CPD$OFF 000000                         wreg 000FE8  
              __CFG_WDT$OFF 000000                        STR_1 1001                        _LATC 000F8B  
                      _main 1172                        start 0000               __CFG_IESO$OFF 000000  
             __CFG_MCLRE$ON 000000                ___param_bank 000000               write_to_lcd@n 000A  
                     ?_main 0001                       _TRISC 000F94               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000                       tablat 000FF5                       status 000FD8  
            __CFG_PBADEN$ON 000000             __initialization 11BA  __size_of_send_command_byte 0016  
              __end_of_main 118E       __size_of_write_to_lcd 0082                      ??_main 000E  
             __activetblptr 000001                ?_send_nibble 0001            __end_of_delay_ms 1172  
            __CFG_XINST$OFF 000000                _write_to_lcd 1024              __CFG_STVREN$ON 000000  
         write_to_lcd@n_130 000C              _send_data_byte 118E                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                __accesstop 0080     __end_of__initialization 11BA               ___rparam_used 000001  
            __pcstackCOMRAM 0001      __end_of_send_data_byte 11A4             ?_send_data_byte 0001  
                _config_lcd 10A6                   ?_delay_ms 0001        __size_of_send_nibble 0034  
     send_command_byte@byte 0005                     __Hparam 0000                     __Lparam 0000  
              __psmallconst 1000                     __pcinit 11BA                     __ramtop 1000  
                   __ptext0 1172                     __ptext1 1024                     __ptext2 118E  
                   __ptext3 10A6                     __ptext4 11A4                     __ptext5 111A  
                   __ptext6 114E                  ??_delay_ms 0003        end_of_initialization 11BA  
         send_nibble@nibble 0004                 ?_config_lcd 0001         start_initialization 11BA  
          ??_send_data_byte 0005         __size_of_config_lcd 0074            write_to_lcd@data 0006  
          __CFG_LPT1OSC$OFF 000000          send_data_byte@byte 0005           __size_of_delay_ms 0024  
         __CFG_CCP2MX$PORTC 000000                 __smallconst 1000               ??_send_nibble 0004  
                  _LATCbits 000F8B                   delay_ms@n 0001               ?_write_to_lcd 0006  
          __CFG_WDTPS$32768 000000                ??_config_lcd 0006         __end_of_send_nibble 114E  
                  __Hrparam 0000              ??_write_to_lcd 0008                    __Lrparam 0000  
              __Lsmallconst 1000          __CFG_BOREN$SBORDIS 000000          __end_of_config_lcd 111A  
                  _delay_ms 114E               __size_of_main 001C                 _send_nibble 111A  
         _send_command_byte 11A4          ?_send_command_byte 0001        __end_of_write_to_lcd 10A6  
       ??_send_command_byte 0005  
